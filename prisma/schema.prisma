datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Profile {
  id               String     @id @default(uuid())
  clerkId          String     @unique
  firstName        String
  lastName         String
  username         String     @unique
  email            String
  profileImg       String
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  items            Item[]
  favorites        Favorite[]
  reviews          Review[]
  rents            Rent[]
  messagesSent     Message[]  @relation("MessagesSent")
  messagesReceived Message[]  @relation("MessagesReceived")
}

model Item {
  id          String     @id @default(uuid())
  name        String
  category    String
  image       String
  description String
  city        String
  price       Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  profile     Profile    @relation(fields: [profileId], references: [clerkId])
  profileId   String
  favorites   Favorite[]
  reviews     Review[]
  rents       Rent[]
}

model Favorite {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile   Profile @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  profileId String

  item   Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId String
}

model Review {
  id        String   @id @default(uuid())
  profile   Profile  @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  profileId String
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId    String
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rent {
  id            String   @id @default(uuid())
  profile       Profile  @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  profileId     String
  item          Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId        String
  totalPrice    Int
  totalDays     Int
  startDate     DateTime
  endDate       DateTime
  paymentStatus Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Message {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  sender   Profile @relation("MessagesSent", fields: [senderId], references: [clerkId])
  receiver Profile @relation("MessagesReceived", fields: [receiverId], references: [clerkId])

  @@index([senderId, receiverId, createdAt])
}
